{"ast":null,"code":"import { useRef, useState, useEffect } from \"react\";\n\n/** Custom hook for managing \"flash\" messages.\n *\n * This adds an item in state, `active`, which can be controlled by the\n * component as desired. The component would typically `setActive(true)`\n * to start displaying the message, and after `timeInMsec`, active would\n * go back to false, which would typically stop showing the message.\n *\n * In the component::\n *\n *   const [myMsgFlag, setMyMsgFlag] = useTimedMessage();\n *\n *   function somethingDidntWork() {\n *     setMsgFlag(true);\n *   }\n *\n *   return (\n *     {myMsgFlag ? <p>Oh No!</p> : null}\n *   )\n *\n * While this hook was written for showing flash messages, it's really just\n * a hook for timed state clearing -- this same pattern could be useful for\n * other tasks.\n *\n */\n\nfunction useTimedMessage() {\n  let timeInMsec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;\n  const [active, setActive] = useState(false);\n  const messageShownRef = useRef(false);\n  useEffect(function showSavedMessage() {\n    console.debug(\"useTimedMessage useEffect showSavedMessage\", \"active=\", active);\n    if (active && !messageShownRef.current) {\n      messageShownRef.current = true;\n      setTimeout(function removeMessage() {\n        setActive(false);\n        messageShownRef.current = false;\n      }, timeInMsec);\n    }\n  }, [active, timeInMsec]);\n  return [active, setActive];\n}\nexport default useTimedMessage;","map":{"version":3,"names":["useRef","useState","useEffect","useTimedMessage","timeInMsec","arguments","length","undefined","active","setActive","messageShownRef","showSavedMessage","console","debug","current","setTimeout","removeMessage"],"sources":["/home/tianr/springboard/react-jobly/jobly/src/hooks/useTimedMessage.js"],"sourcesContent":["import { useRef, useState, useEffect } from \"react\";\n\n/** Custom hook for managing \"flash\" messages.\n *\n * This adds an item in state, `active`, which can be controlled by the\n * component as desired. The component would typically `setActive(true)`\n * to start displaying the message, and after `timeInMsec`, active would\n * go back to false, which would typically stop showing the message.\n *\n * In the component::\n *\n *   const [myMsgFlag, setMyMsgFlag] = useTimedMessage();\n *\n *   function somethingDidntWork() {\n *     setMsgFlag(true);\n *   }\n *\n *   return (\n *     {myMsgFlag ? <p>Oh No!</p> : null}\n *   )\n *\n * While this hook was written for showing flash messages, it's really just\n * a hook for timed state clearing -- this same pattern could be useful for\n * other tasks.\n *\n */\n\nfunction useTimedMessage(timeInMsec = 3000) {\n  const [active, setActive] = useState(false);\n\n  const messageShownRef = useRef(false);\n\n  useEffect(\n      function showSavedMessage() {\n        console.debug(\n            \"useTimedMessage useEffect showSavedMessage\", \"active=\", active);\n\n        if (active && !messageShownRef.current) {\n          messageShownRef.current = true;\n          setTimeout(function removeMessage() {\n            setActive(false);\n            messageShownRef.current = false;\n          }, timeInMsec);\n        }\n      },\n      [active, timeInMsec],\n  );\n\n  return [active, setActive];\n}\n\nexport default useTimedMessage;\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,eAAeA,CAAA,EAAoB;EAAA,IAAnBC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACxC,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAMS,eAAe,GAAGV,MAAM,CAAC,KAAK,CAAC;EAErCE,SAAS,CACL,SAASS,gBAAgBA,CAAA,EAAG;IAC1BC,OAAO,CAACC,KAAK,CACT,4CAA4C,EAAE,SAAS,EAAEL,MAAM,CAAC;IAEpE,IAAIA,MAAM,IAAI,CAACE,eAAe,CAACI,OAAO,EAAE;MACtCJ,eAAe,CAACI,OAAO,GAAG,IAAI;MAC9BC,UAAU,CAAC,SAASC,aAAaA,CAAA,EAAG;QAClCP,SAAS,CAAC,KAAK,CAAC;QAChBC,eAAe,CAACI,OAAO,GAAG,KAAK;MACjC,CAAC,EAAEV,UAAU,CAAC;IAChB;EACF,CAAC,EACD,CAACI,MAAM,EAAEJ,UAAU,CACvB,CAAC;EAED,OAAO,CAACI,MAAM,EAAEC,SAAS,CAAC;AAC5B;AAEA,eAAeN,eAAe"},"metadata":{},"sourceType":"module"}